// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.ComputeSchedule.Models
{
    /// <summary> The types of deadlines supported by ScheduledActions. </summary>
    public readonly partial struct DeadlineType : IEquatable<DeadlineType>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="DeadlineType"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public DeadlineType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string UnknownValue = "Unknown";
        private const string InitiateAtValue = "InitiateAt";
        private const string CompleteByValue = "CompleteBy";

        /// <summary> Default value of Unknown. </summary>
        public static DeadlineType Unknown { get; } = new DeadlineType(UnknownValue);
        /// <summary> Initiate the operation at the given deadline. </summary>
        public static DeadlineType InitiateAt { get; } = new DeadlineType(InitiateAtValue);
        /// <summary> Complete the operation by the given deadline. </summary>
        public static DeadlineType CompleteBy { get; } = new DeadlineType(CompleteByValue);
        /// <summary> Determines if two <see cref="DeadlineType"/> values are the same. </summary>
        public static bool operator ==(DeadlineType left, DeadlineType right) => left.Equals(right);
        /// <summary> Determines if two <see cref="DeadlineType"/> values are not the same. </summary>
        public static bool operator !=(DeadlineType left, DeadlineType right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="DeadlineType"/>. </summary>
        public static implicit operator DeadlineType(string value) => new DeadlineType(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is DeadlineType other && Equals(other);
        /// <inheritdoc />
        public bool Equals(DeadlineType other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
