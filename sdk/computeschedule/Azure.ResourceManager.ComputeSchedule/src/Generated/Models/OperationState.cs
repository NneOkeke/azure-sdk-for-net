// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.ComputeSchedule.Models
{
    /// <summary> Values that define the states of operations in Scheduled Actions. </summary>
    public readonly partial struct OperationState : IEquatable<OperationState>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="OperationState"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public OperationState(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string UnknownValue = "Unknown";
        private const string PendingSchedulingValue = "PendingScheduling";
        private const string ScheduledValue = "Scheduled";
        private const string PendingExecutionValue = "PendingExecution";
        private const string ExecutingValue = "Executing";
        private const string SucceededValue = "Succeeded";
        private const string FailedValue = "Failed";
        private const string CancelledValue = "Cancelled";
        private const string BlockedValue = "Blocked";

        /// <summary> The default value for the operation state enum. </summary>
        public static OperationState Unknown { get; } = new OperationState(UnknownValue);
        /// <summary> Operations that are pending scheduling. </summary>
        public static OperationState PendingScheduling { get; } = new OperationState(PendingSchedulingValue);
        /// <summary> Operations that have been scheduled. </summary>
        public static OperationState Scheduled { get; } = new OperationState(ScheduledValue);
        /// <summary> Operations that are waiting to be executed. </summary>
        public static OperationState PendingExecution { get; } = new OperationState(PendingExecutionValue);
        /// <summary> Operations that are in the process of being executed. </summary>
        public static OperationState Executing { get; } = new OperationState(ExecutingValue);
        /// <summary> Operations that suceeded. </summary>
        public static OperationState Succeeded { get; } = new OperationState(SucceededValue);
        /// <summary> Operations that have failed. </summary>
        public static OperationState Failed { get; } = new OperationState(FailedValue);
        /// <summary> Operations that have been cancelled by the user. </summary>
        public static OperationState Cancelled { get; } = new OperationState(CancelledValue);
        /// <summary> Operations that are blocked. </summary>
        public static OperationState Blocked { get; } = new OperationState(BlockedValue);
        /// <summary> Determines if two <see cref="OperationState"/> values are the same. </summary>
        public static bool operator ==(OperationState left, OperationState right) => left.Equals(right);
        /// <summary> Determines if two <see cref="OperationState"/> values are not the same. </summary>
        public static bool operator !=(OperationState left, OperationState right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="OperationState"/>. </summary>
        public static implicit operator OperationState(string value) => new OperationState(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is OperationState other && Equals(other);
        /// <inheritdoc />
        public bool Equals(OperationState other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
