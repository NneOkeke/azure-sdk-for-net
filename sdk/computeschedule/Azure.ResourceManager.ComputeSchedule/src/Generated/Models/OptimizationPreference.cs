// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.ComputeSchedule.Models
{
    /// <summary> The preferences customers can select to optimize their requests to ScheduledActions. </summary>
    public readonly partial struct OptimizationPreference : IEquatable<OptimizationPreference>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="OptimizationPreference"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public OptimizationPreference(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string CostValue = "Cost";
        private const string AvailabilityValue = "Availability";
        private const string CostAvailabilityBalancedValue = "CostAvailabilityBalanced";

        /// <summary> Optimize while considering cost savings. </summary>
        public static OptimizationPreference Cost { get; } = new OptimizationPreference(CostValue);
        /// <summary> Optimize while considering availability of resources. </summary>
        public static OptimizationPreference Availability { get; } = new OptimizationPreference(AvailabilityValue);
        /// <summary> Optimize while considering a balance of cost and availability. </summary>
        public static OptimizationPreference CostAvailabilityBalanced { get; } = new OptimizationPreference(CostAvailabilityBalancedValue);
        /// <summary> Determines if two <see cref="OptimizationPreference"/> values are the same. </summary>
        public static bool operator ==(OptimizationPreference left, OptimizationPreference right) => left.Equals(right);
        /// <summary> Determines if two <see cref="OptimizationPreference"/> values are not the same. </summary>
        public static bool operator !=(OptimizationPreference left, OptimizationPreference right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="OptimizationPreference"/>. </summary>
        public static implicit operator OptimizationPreference(string value) => new OptimizationPreference(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is OptimizationPreference other && Equals(other);
        /// <inheritdoc />
        public bool Equals(OptimizationPreference other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
