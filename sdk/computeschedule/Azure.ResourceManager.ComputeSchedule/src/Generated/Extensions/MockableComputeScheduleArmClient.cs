// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading;
using Autorest.CSharp.Core;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.ResourceManager.ComputeSchedule.Models;

namespace Azure.ResourceManager.ComputeSchedule.Mocking
{
    /// <summary> A class to add extension methods to ArmClient. </summary>
    public partial class MockableComputeScheduleArmClient : ArmResource
    {
        private ClientDiagnostics _autoActionsExtensionClientDiagnostics;
        private AutoActionsExtensionRestOperations _autoActionsExtensionRestClient;

        /// <summary> Initializes a new instance of the <see cref="MockableComputeScheduleArmClient"/> class for mocking. </summary>
        protected MockableComputeScheduleArmClient()
        {
        }

        /// <summary> Initializes a new instance of the <see cref="MockableComputeScheduleArmClient"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="id"> The identifier of the resource that is the target of operations. </param>
        internal MockableComputeScheduleArmClient(ArmClient client, ResourceIdentifier id) : base(client, id)
        {
        }

        internal MockableComputeScheduleArmClient(ArmClient client) : this(client, ResourceIdentifier.Root)
        {
        }

        private ClientDiagnostics AutoActionsExtensionClientDiagnostics => _autoActionsExtensionClientDiagnostics ??= new ClientDiagnostics("Azure.ResourceManager.ComputeSchedule", ProviderConstants.DefaultProviderNamespace, Diagnostics);
        private AutoActionsExtensionRestOperations AutoActionsExtensionRestClient => _autoActionsExtensionRestClient ??= new AutoActionsExtensionRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint);

        private string GetApiVersionOrNull(Core.ResourceType resourceType)
        {
            TryGetApiVersion(resourceType, out string apiVersion);
            return apiVersion;
        }

        /// <summary>
        /// List AutoActionResources resources by parent
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/{resourceUri}/providers/Microsoft.ComputeSchedule/autoActionResources</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>AutoActionResources_ListByVms</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2024-08-01-preview</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="scope"> The scope that the resource will apply against. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="scope"/> is null. </exception>
        /// <returns> An async collection of <see cref="AutoActionResources"/> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<AutoActionResources> GetAutoActionsExtensionsByVmsAsync(ResourceIdentifier scope, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(scope, nameof(scope));

            HttpMessage FirstPageRequest(int? pageSizeHint) => AutoActionsExtensionRestClient.CreateListByVmsRequest(scope);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => AutoActionsExtensionRestClient.CreateListByVmsNextPageRequest(nextLink, scope);
            return GeneratorPageableHelpers.CreateAsyncPageable(FirstPageRequest, NextPageRequest, e => AutoActionResources.DeserializeAutoActionResources(e), AutoActionsExtensionClientDiagnostics, Pipeline, "MockableComputeScheduleArmClient.GetAutoActionsExtensionsByVms", "value", "nextLink", cancellationToken);
        }

        /// <summary>
        /// List AutoActionResources resources by parent
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/{resourceUri}/providers/Microsoft.ComputeSchedule/autoActionResources</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>AutoActionResources_ListByVms</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2024-08-01-preview</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="scope"> The scope that the resource will apply against. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="scope"/> is null. </exception>
        /// <returns> A collection of <see cref="AutoActionResources"/> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<AutoActionResources> GetAutoActionsExtensionsByVms(ResourceIdentifier scope, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(scope, nameof(scope));

            HttpMessage FirstPageRequest(int? pageSizeHint) => AutoActionsExtensionRestClient.CreateListByVmsRequest(scope);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => AutoActionsExtensionRestClient.CreateListByVmsNextPageRequest(nextLink, scope);
            return GeneratorPageableHelpers.CreatePageable(FirstPageRequest, NextPageRequest, e => AutoActionResources.DeserializeAutoActionResources(e), AutoActionsExtensionClientDiagnostics, Pipeline, "MockableComputeScheduleArmClient.GetAutoActionsExtensionsByVms", "value", "nextLink", cancellationToken);
        }
        /// <summary>
        /// Gets an object representing an <see cref="AutoActionResource"/> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="AutoActionResource.CreateResourceIdentifier" /> to create an <see cref="AutoActionResource"/> <see cref="ResourceIdentifier"/> from its components.
        /// </summary>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="AutoActionResource"/> object. </returns>
        public virtual AutoActionResource GetAutoActionResource(ResourceIdentifier id)
        {
            AutoActionResource.ValidateResourceId(id);
            return new AutoActionResource(Client, id);
        }

        /// <summary>
        /// Gets an object representing an <see cref="OccurrenceResource"/> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="OccurrenceResource.CreateResourceIdentifier" /> to create an <see cref="OccurrenceResource"/> <see cref="ResourceIdentifier"/> from its components.
        /// </summary>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="OccurrenceResource"/> object. </returns>
        public virtual OccurrenceResource GetOccurrenceResource(ResourceIdentifier id)
        {
            OccurrenceResource.ValidateResourceId(id);
            return new OccurrenceResource(Client, id);
        }
    }
}
