// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Identity;
using NUnit.Framework;

namespace Azure.ResourceManager.ComputeSchedule.Samples
{
    public partial class Sample_OccurrenceCollection
    {
        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Get_OccurrencesGetMaximumSet()
        {
            // Generated from example definition: 2024-08-01-preview/Occurrences_Get_MaximumSet_Gen.json
            // this example is just showing the usage of "Occurrence_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this AutoActionResource created on azure
            // for more information of creating AutoActionResource, please refer to the document of AutoActionResource
            string subscriptionId = "E8DD5C3E-B5E9-4828-848D-2F377C67DA87";
            string resourceGroupName = "rgcomputeschedule";
            string autoActionName = "-NsTNcpXLW5lr";
            ResourceIdentifier autoActionResourceId = AutoActionResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, autoActionName);
            AutoActionResource autoAction = client.GetAutoActionResource(autoActionResourceId);

            // get the collection of this OccurrenceResource
            OccurrenceCollection collection = autoAction.GetOccurrences();

            // invoke the operation
            string occurrenceId = "bec84b83-43ac-658d-a8ec-7995315dd309";
            OccurrenceResource result = await collection.GetAsync(occurrenceId);

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            OccurrenceData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Get_OccurrencesGetMinimumSet()
        {
            // Generated from example definition: 2024-08-01-preview/Occurrences_Get_MinimumSet_Gen.json
            // this example is just showing the usage of "Occurrence_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this AutoActionResource created on azure
            // for more information of creating AutoActionResource, please refer to the document of AutoActionResource
            string subscriptionId = "E8DD5C3E-B5E9-4828-848D-2F377C67DA87";
            string resourceGroupName = "rgcomputeschedule";
            string autoActionName = "q5NoZUgqe4GKhBe";
            ResourceIdentifier autoActionResourceId = AutoActionResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, autoActionName);
            AutoActionResource autoAction = client.GetAutoActionResource(autoActionResourceId);

            // get the collection of this OccurrenceResource
            OccurrenceCollection collection = autoAction.GetOccurrences();

            // invoke the operation
            string occurrenceId = "da7c55af-2bb1-2212-2147-9eba521fb361";
            OccurrenceResource result = await collection.GetAsync(occurrenceId);

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            OccurrenceData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task GetAll_OccurrencesListByAutoActionMaximumSet()
        {
            // Generated from example definition: 2024-08-01-preview/Occurrences_ListByAutoAction_MaximumSet_Gen.json
            // this example is just showing the usage of "Occurrence_ListByAutoAction" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this AutoActionResource created on azure
            // for more information of creating AutoActionResource, please refer to the document of AutoActionResource
            string subscriptionId = "E8DD5C3E-B5E9-4828-848D-2F377C67DA87";
            string resourceGroupName = "rgcomputeschedule";
            string autoActionName = "oZIOb5ne";
            ResourceIdentifier autoActionResourceId = AutoActionResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, autoActionName);
            AutoActionResource autoAction = client.GetAutoActionResource(autoActionResourceId);

            // get the collection of this OccurrenceResource
            OccurrenceCollection collection = autoAction.GetOccurrences();

            // invoke the operation and iterate over the result
            await foreach (OccurrenceResource item in collection.GetAllAsync())
            {
                // the variable item is a resource, you could call other operations on this instance as well
                // but just for demo, we get its data from this resource instance
                OccurrenceData resourceData = item.Data;
                // for demo we just print out the id
                Console.WriteLine($"Succeeded on id: {resourceData.Id}");
            }

            Console.WriteLine("Succeeded");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task GetAll_OccurrencesListByAutoActionMinimumSet()
        {
            // Generated from example definition: 2024-08-01-preview/Occurrences_ListByAutoAction_MinimumSet_Gen.json
            // this example is just showing the usage of "Occurrence_ListByAutoAction" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this AutoActionResource created on azure
            // for more information of creating AutoActionResource, please refer to the document of AutoActionResource
            string subscriptionId = "E8DD5C3E-B5E9-4828-848D-2F377C67DA87";
            string resourceGroupName = "rgcomputeschedule";
            string autoActionName = "NvubHRZQ28y73JN95228MN5";
            ResourceIdentifier autoActionResourceId = AutoActionResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, autoActionName);
            AutoActionResource autoAction = client.GetAutoActionResource(autoActionResourceId);

            // get the collection of this OccurrenceResource
            OccurrenceCollection collection = autoAction.GetOccurrences();

            // invoke the operation and iterate over the result
            await foreach (OccurrenceResource item in collection.GetAllAsync())
            {
                // the variable item is a resource, you could call other operations on this instance as well
                // but just for demo, we get its data from this resource instance
                OccurrenceData resourceData = item.Data;
                // for demo we just print out the id
                Console.WriteLine($"Succeeded on id: {resourceData.Id}");
            }

            Console.WriteLine("Succeeded");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Exists_OccurrencesGetMaximumSet()
        {
            // Generated from example definition: 2024-08-01-preview/Occurrences_Get_MaximumSet_Gen.json
            // this example is just showing the usage of "Occurrence_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this AutoActionResource created on azure
            // for more information of creating AutoActionResource, please refer to the document of AutoActionResource
            string subscriptionId = "E8DD5C3E-B5E9-4828-848D-2F377C67DA87";
            string resourceGroupName = "rgcomputeschedule";
            string autoActionName = "-NsTNcpXLW5lr";
            ResourceIdentifier autoActionResourceId = AutoActionResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, autoActionName);
            AutoActionResource autoAction = client.GetAutoActionResource(autoActionResourceId);

            // get the collection of this OccurrenceResource
            OccurrenceCollection collection = autoAction.GetOccurrences();

            // invoke the operation
            string occurrenceId = "bec84b83-43ac-658d-a8ec-7995315dd309";
            bool result = await collection.ExistsAsync(occurrenceId);

            Console.WriteLine($"Succeeded: {result}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Exists_OccurrencesGetMinimumSet()
        {
            // Generated from example definition: 2024-08-01-preview/Occurrences_Get_MinimumSet_Gen.json
            // this example is just showing the usage of "Occurrence_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this AutoActionResource created on azure
            // for more information of creating AutoActionResource, please refer to the document of AutoActionResource
            string subscriptionId = "E8DD5C3E-B5E9-4828-848D-2F377C67DA87";
            string resourceGroupName = "rgcomputeschedule";
            string autoActionName = "q5NoZUgqe4GKhBe";
            ResourceIdentifier autoActionResourceId = AutoActionResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, autoActionName);
            AutoActionResource autoAction = client.GetAutoActionResource(autoActionResourceId);

            // get the collection of this OccurrenceResource
            OccurrenceCollection collection = autoAction.GetOccurrences();

            // invoke the operation
            string occurrenceId = "da7c55af-2bb1-2212-2147-9eba521fb361";
            bool result = await collection.ExistsAsync(occurrenceId);

            Console.WriteLine($"Succeeded: {result}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task GetIfExists_OccurrencesGetMaximumSet()
        {
            // Generated from example definition: 2024-08-01-preview/Occurrences_Get_MaximumSet_Gen.json
            // this example is just showing the usage of "Occurrence_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this AutoActionResource created on azure
            // for more information of creating AutoActionResource, please refer to the document of AutoActionResource
            string subscriptionId = "E8DD5C3E-B5E9-4828-848D-2F377C67DA87";
            string resourceGroupName = "rgcomputeschedule";
            string autoActionName = "-NsTNcpXLW5lr";
            ResourceIdentifier autoActionResourceId = AutoActionResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, autoActionName);
            AutoActionResource autoAction = client.GetAutoActionResource(autoActionResourceId);

            // get the collection of this OccurrenceResource
            OccurrenceCollection collection = autoAction.GetOccurrences();

            // invoke the operation
            string occurrenceId = "bec84b83-43ac-658d-a8ec-7995315dd309";
            NullableResponse<OccurrenceResource> response = await collection.GetIfExistsAsync(occurrenceId);
            OccurrenceResource result = response.HasValue ? response.Value : null;

            if (result == null)
            {
                Console.WriteLine("Succeeded with null as result");
            }
            else
            {
                // the variable result is a resource, you could call other operations on this instance as well
                // but just for demo, we get its data from this resource instance
                OccurrenceData resourceData = result.Data;
                // for demo we just print out the id
                Console.WriteLine($"Succeeded on id: {resourceData.Id}");
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task GetIfExists_OccurrencesGetMinimumSet()
        {
            // Generated from example definition: 2024-08-01-preview/Occurrences_Get_MinimumSet_Gen.json
            // this example is just showing the usage of "Occurrence_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this AutoActionResource created on azure
            // for more information of creating AutoActionResource, please refer to the document of AutoActionResource
            string subscriptionId = "E8DD5C3E-B5E9-4828-848D-2F377C67DA87";
            string resourceGroupName = "rgcomputeschedule";
            string autoActionName = "q5NoZUgqe4GKhBe";
            ResourceIdentifier autoActionResourceId = AutoActionResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, autoActionName);
            AutoActionResource autoAction = client.GetAutoActionResource(autoActionResourceId);

            // get the collection of this OccurrenceResource
            OccurrenceCollection collection = autoAction.GetOccurrences();

            // invoke the operation
            string occurrenceId = "da7c55af-2bb1-2212-2147-9eba521fb361";
            NullableResponse<OccurrenceResource> response = await collection.GetIfExistsAsync(occurrenceId);
            OccurrenceResource result = response.HasValue ? response.Value : null;

            if (result == null)
            {
                Console.WriteLine("Succeeded with null as result");
            }
            else
            {
                // the variable result is a resource, you could call other operations on this instance as well
                // but just for demo, we get its data from this resource instance
                OccurrenceData resourceData = result.Data;
                // for demo we just print out the id
                Console.WriteLine($"Succeeded on id: {resourceData.Id}");
            }
        }
    }
}
