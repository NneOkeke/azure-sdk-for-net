// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading.Tasks;
using System.Xml;
using Azure.Core;
using Azure.Identity;
using Azure.ResourceManager.ComputeSchedule.Models;
using Azure.ResourceManager.Resources;
using NUnit.Framework;

namespace Azure.ResourceManager.ComputeSchedule.Samples
{
    public partial class Sample_AutoActionCollection
    {
        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task CreateOrUpdate_AutoActionsCreateOrUpdateMaximumSet()
        {
            // Generated from example definition: 2024-08-01-preview/AutoActions_CreateOrUpdate_MaximumSet_Gen.json
            // this example is just showing the usage of "AutoAction_CreateOrUpdate" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ResourceGroupResource created on azure
            // for more information of creating ResourceGroupResource, please refer to the document of ResourceGroupResource
            string subscriptionId = "E8DD5C3E-B5E9-4828-848D-2F377C67DA87";
            string resourceGroupName = "rgcomputeschedule";
            ResourceIdentifier resourceGroupResourceId = ResourceGroupResource.CreateResourceIdentifier(subscriptionId, resourceGroupName);
            ResourceGroupResource resourceGroupResource = client.GetResourceGroupResource(resourceGroupResourceId);

            // get the collection of this AutoActionResource
            AutoActionCollection collection = resourceGroupResource.GetAutoActions();

            // invoke the operation
            string autoActionName = "0LiLUqwW2lsy-T";
            AutoActionData data = new AutoActionData(new AzureLocation("veeiafymujfsspyuwfsbqe"))
            {
                Properties = new AutoActionProperties(Models.ResourceType.VirtualMachine, ActionType.Start, DateTimeOffset.Parse("2024-10-25T22:23:40.046Z"), new AutoActionSchedule(
                XmlConvert.ToTimeSpan("22:23:40.046Z"),
                "jxvsidfyhvrvs",
                new WeekDay[] { WeekDay.Monday },
                new Month[] { Month.January },
                new int[] { 6 },
                new ScheduledActionExecutionParameterDetail
                {
                    OptimizationPreference = ScheduledActionOptimizationPreference.Cost,
                    RetryPolicy = new UserRequestRetryPolicy
                    {
                        RetryCount = 25,
                        RetryWindowInMinutes = 22,
                    },
                },
                ScheduledActionDeadlineType.Unknown), new NotificationProperties[]
            {
new NotificationProperties("i", NotificationType.Email, Language.EnUs)
{
Disabled = true,
}
            })
                {
                    EndOn = DateTimeOffset.Parse("2024-10-25T22:23:40.046Z"),
                    Disabled = true,
                },
                Tags =
{
["key3166"] = "msvqhqzawrscafynureuqcwiqy"
},
            };
            ArmOperation<AutoActionResource> lro = await collection.CreateOrUpdateAsync(WaitUntil.Completed, autoActionName, data);
            AutoActionResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            AutoActionData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task CreateOrUpdate_AutoActionsCreateOrUpdateMinimumSet()
        {
            // Generated from example definition: 2024-08-01-preview/AutoActions_CreateOrUpdate_MinimumSet_Gen.json
            // this example is just showing the usage of "AutoAction_CreateOrUpdate" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ResourceGroupResource created on azure
            // for more information of creating ResourceGroupResource, please refer to the document of ResourceGroupResource
            string subscriptionId = "E8DD5C3E-B5E9-4828-848D-2F377C67DA87";
            string resourceGroupName = "rgcomputeschedule";
            ResourceIdentifier resourceGroupResourceId = ResourceGroupResource.CreateResourceIdentifier(subscriptionId, resourceGroupName);
            ResourceGroupResource resourceGroupResource = client.GetResourceGroupResource(resourceGroupResourceId);

            // get the collection of this AutoActionResource
            AutoActionCollection collection = resourceGroupResource.GetAutoActions();

            // invoke the operation
            string autoActionName = "0uX5zQA-8bYpdrGd3mLVpH23";
            AutoActionData data = new AutoActionData(new AzureLocation("veeiafymujfsspyuwfsbqe"));
            ArmOperation<AutoActionResource> lro = await collection.CreateOrUpdateAsync(WaitUntil.Completed, autoActionName, data);
            AutoActionResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            AutoActionData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Get_AutoActionsGetMaximumSet()
        {
            // Generated from example definition: 2024-08-01-preview/AutoActions_Get_MaximumSet_Gen.json
            // this example is just showing the usage of "AutoAction_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ResourceGroupResource created on azure
            // for more information of creating ResourceGroupResource, please refer to the document of ResourceGroupResource
            string subscriptionId = "E8DD5C3E-B5E9-4828-848D-2F377C67DA87";
            string resourceGroupName = "rgcomputeschedule";
            ResourceIdentifier resourceGroupResourceId = ResourceGroupResource.CreateResourceIdentifier(subscriptionId, resourceGroupName);
            ResourceGroupResource resourceGroupResource = client.GetResourceGroupResource(resourceGroupResourceId);

            // get the collection of this AutoActionResource
            AutoActionCollection collection = resourceGroupResource.GetAutoActions();

            // invoke the operation
            string autoActionName = "eRAdkLqFT0Q4YqC1D";
            AutoActionResource result = await collection.GetAsync(autoActionName);

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            AutoActionData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Get_AutoActionsGetMinimumSet()
        {
            // Generated from example definition: 2024-08-01-preview/AutoActions_Get_MinimumSet_Gen.json
            // this example is just showing the usage of "AutoAction_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ResourceGroupResource created on azure
            // for more information of creating ResourceGroupResource, please refer to the document of ResourceGroupResource
            string subscriptionId = "E8DD5C3E-B5E9-4828-848D-2F377C67DA87";
            string resourceGroupName = "rgcomputeschedule";
            ResourceIdentifier resourceGroupResourceId = ResourceGroupResource.CreateResourceIdentifier(subscriptionId, resourceGroupName);
            ResourceGroupResource resourceGroupResource = client.GetResourceGroupResource(resourceGroupResourceId);

            // get the collection of this AutoActionResource
            AutoActionCollection collection = resourceGroupResource.GetAutoActions();

            // invoke the operation
            string autoActionName = "K8ehqrJa6dm-ZBaI";
            AutoActionResource result = await collection.GetAsync(autoActionName);

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            AutoActionData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task GetAll_AutoActionsListByResourceGroupMaximumSet()
        {
            // Generated from example definition: 2024-08-01-preview/AutoActions_ListByResourceGroup_MaximumSet_Gen.json
            // this example is just showing the usage of "AutoAction_ListByResourceGroup" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ResourceGroupResource created on azure
            // for more information of creating ResourceGroupResource, please refer to the document of ResourceGroupResource
            string subscriptionId = "E8DD5C3E-B5E9-4828-848D-2F377C67DA87";
            string resourceGroupName = "rgcomputeschedule";
            ResourceIdentifier resourceGroupResourceId = ResourceGroupResource.CreateResourceIdentifier(subscriptionId, resourceGroupName);
            ResourceGroupResource resourceGroupResource = client.GetResourceGroupResource(resourceGroupResourceId);

            // get the collection of this AutoActionResource
            AutoActionCollection collection = resourceGroupResource.GetAutoActions();

            // invoke the operation and iterate over the result
            await foreach (AutoActionResource item in collection.GetAllAsync())
            {
                // the variable item is a resource, you could call other operations on this instance as well
                // but just for demo, we get its data from this resource instance
                AutoActionData resourceData = item.Data;
                // for demo we just print out the id
                Console.WriteLine($"Succeeded on id: {resourceData.Id}");
            }

            Console.WriteLine("Succeeded");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task GetAll_AutoActionsListByResourceGroupMinimumSet()
        {
            // Generated from example definition: 2024-08-01-preview/AutoActions_ListByResourceGroup_MinimumSet_Gen.json
            // this example is just showing the usage of "AutoAction_ListByResourceGroup" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ResourceGroupResource created on azure
            // for more information of creating ResourceGroupResource, please refer to the document of ResourceGroupResource
            string subscriptionId = "E8DD5C3E-B5E9-4828-848D-2F377C67DA87";
            string resourceGroupName = "rgcomputeschedule";
            ResourceIdentifier resourceGroupResourceId = ResourceGroupResource.CreateResourceIdentifier(subscriptionId, resourceGroupName);
            ResourceGroupResource resourceGroupResource = client.GetResourceGroupResource(resourceGroupResourceId);

            // get the collection of this AutoActionResource
            AutoActionCollection collection = resourceGroupResource.GetAutoActions();

            // invoke the operation and iterate over the result
            await foreach (AutoActionResource item in collection.GetAllAsync())
            {
                // the variable item is a resource, you could call other operations on this instance as well
                // but just for demo, we get its data from this resource instance
                AutoActionData resourceData = item.Data;
                // for demo we just print out the id
                Console.WriteLine($"Succeeded on id: {resourceData.Id}");
            }

            Console.WriteLine("Succeeded");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Exists_AutoActionsGetMaximumSet()
        {
            // Generated from example definition: 2024-08-01-preview/AutoActions_Get_MaximumSet_Gen.json
            // this example is just showing the usage of "AutoAction_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ResourceGroupResource created on azure
            // for more information of creating ResourceGroupResource, please refer to the document of ResourceGroupResource
            string subscriptionId = "E8DD5C3E-B5E9-4828-848D-2F377C67DA87";
            string resourceGroupName = "rgcomputeschedule";
            ResourceIdentifier resourceGroupResourceId = ResourceGroupResource.CreateResourceIdentifier(subscriptionId, resourceGroupName);
            ResourceGroupResource resourceGroupResource = client.GetResourceGroupResource(resourceGroupResourceId);

            // get the collection of this AutoActionResource
            AutoActionCollection collection = resourceGroupResource.GetAutoActions();

            // invoke the operation
            string autoActionName = "eRAdkLqFT0Q4YqC1D";
            bool result = await collection.ExistsAsync(autoActionName);

            Console.WriteLine($"Succeeded: {result}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Exists_AutoActionsGetMinimumSet()
        {
            // Generated from example definition: 2024-08-01-preview/AutoActions_Get_MinimumSet_Gen.json
            // this example is just showing the usage of "AutoAction_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ResourceGroupResource created on azure
            // for more information of creating ResourceGroupResource, please refer to the document of ResourceGroupResource
            string subscriptionId = "E8DD5C3E-B5E9-4828-848D-2F377C67DA87";
            string resourceGroupName = "rgcomputeschedule";
            ResourceIdentifier resourceGroupResourceId = ResourceGroupResource.CreateResourceIdentifier(subscriptionId, resourceGroupName);
            ResourceGroupResource resourceGroupResource = client.GetResourceGroupResource(resourceGroupResourceId);

            // get the collection of this AutoActionResource
            AutoActionCollection collection = resourceGroupResource.GetAutoActions();

            // invoke the operation
            string autoActionName = "K8ehqrJa6dm-ZBaI";
            bool result = await collection.ExistsAsync(autoActionName);

            Console.WriteLine($"Succeeded: {result}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task GetIfExists_AutoActionsGetMaximumSet()
        {
            // Generated from example definition: 2024-08-01-preview/AutoActions_Get_MaximumSet_Gen.json
            // this example is just showing the usage of "AutoAction_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ResourceGroupResource created on azure
            // for more information of creating ResourceGroupResource, please refer to the document of ResourceGroupResource
            string subscriptionId = "E8DD5C3E-B5E9-4828-848D-2F377C67DA87";
            string resourceGroupName = "rgcomputeschedule";
            ResourceIdentifier resourceGroupResourceId = ResourceGroupResource.CreateResourceIdentifier(subscriptionId, resourceGroupName);
            ResourceGroupResource resourceGroupResource = client.GetResourceGroupResource(resourceGroupResourceId);

            // get the collection of this AutoActionResource
            AutoActionCollection collection = resourceGroupResource.GetAutoActions();

            // invoke the operation
            string autoActionName = "eRAdkLqFT0Q4YqC1D";
            NullableResponse<AutoActionResource> response = await collection.GetIfExistsAsync(autoActionName);
            AutoActionResource result = response.HasValue ? response.Value : null;

            if (result == null)
            {
                Console.WriteLine("Succeeded with null as result");
            }
            else
            {
                // the variable result is a resource, you could call other operations on this instance as well
                // but just for demo, we get its data from this resource instance
                AutoActionData resourceData = result.Data;
                // for demo we just print out the id
                Console.WriteLine($"Succeeded on id: {resourceData.Id}");
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task GetIfExists_AutoActionsGetMinimumSet()
        {
            // Generated from example definition: 2024-08-01-preview/AutoActions_Get_MinimumSet_Gen.json
            // this example is just showing the usage of "AutoAction_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ResourceGroupResource created on azure
            // for more information of creating ResourceGroupResource, please refer to the document of ResourceGroupResource
            string subscriptionId = "E8DD5C3E-B5E9-4828-848D-2F377C67DA87";
            string resourceGroupName = "rgcomputeschedule";
            ResourceIdentifier resourceGroupResourceId = ResourceGroupResource.CreateResourceIdentifier(subscriptionId, resourceGroupName);
            ResourceGroupResource resourceGroupResource = client.GetResourceGroupResource(resourceGroupResourceId);

            // get the collection of this AutoActionResource
            AutoActionCollection collection = resourceGroupResource.GetAutoActions();

            // invoke the operation
            string autoActionName = "K8ehqrJa6dm-ZBaI";
            NullableResponse<AutoActionResource> response = await collection.GetIfExistsAsync(autoActionName);
            AutoActionResource result = response.HasValue ? response.Value : null;

            if (result == null)
            {
                Console.WriteLine("Succeeded with null as result");
            }
            else
            {
                // the variable result is a resource, you could call other operations on this instance as well
                // but just for demo, we get its data from this resource instance
                AutoActionData resourceData = result.Data;
                // for demo we just print out the id
                Console.WriteLine($"Succeeded on id: {resourceData.Id}");
            }
        }
    }
}
