// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading.Tasks;
using System.Xml;
using Azure.Core;
using Azure.Identity;
using Azure.ResourceManager.ComputeSchedule.Models;
using NUnit.Framework;

namespace Azure.ResourceManager.ComputeSchedule.Samples
{
    public partial class Sample_AutoActionResource
    {
        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Get_AutoActionsGetMaximumSet()
        {
            // Generated from example definition: 2024-08-01-preview/AutoActions_Get_MaximumSet_Gen.json
            // this example is just showing the usage of "AutoAction_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this AutoActionResource created on azure
            // for more information of creating AutoActionResource, please refer to the document of AutoActionResource
            string subscriptionId = "E8DD5C3E-B5E9-4828-848D-2F377C67DA87";
            string resourceGroupName = "rgcomputeschedule";
            string autoActionName = "eRAdkLqFT0Q4YqC1D";
            ResourceIdentifier autoActionResourceId = AutoActionResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, autoActionName);
            AutoActionResource autoAction = client.GetAutoActionResource(autoActionResourceId);

            // invoke the operation
            AutoActionResource result = await autoAction.GetAsync();

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            AutoActionData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Get_AutoActionsGetMinimumSet()
        {
            // Generated from example definition: 2024-08-01-preview/AutoActions_Get_MinimumSet_Gen.json
            // this example is just showing the usage of "AutoAction_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this AutoActionResource created on azure
            // for more information of creating AutoActionResource, please refer to the document of AutoActionResource
            string subscriptionId = "E8DD5C3E-B5E9-4828-848D-2F377C67DA87";
            string resourceGroupName = "rgcomputeschedule";
            string autoActionName = "K8ehqrJa6dm-ZBaI";
            ResourceIdentifier autoActionResourceId = AutoActionResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, autoActionName);
            AutoActionResource autoAction = client.GetAutoActionResource(autoActionResourceId);

            // invoke the operation
            AutoActionResource result = await autoAction.GetAsync();

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            AutoActionData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Delete_AutoActionsDeleteMaximumSet()
        {
            // Generated from example definition: 2024-08-01-preview/AutoActions_Delete_MaximumSet_Gen.json
            // this example is just showing the usage of "AutoAction_Delete" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this AutoActionResource created on azure
            // for more information of creating AutoActionResource, please refer to the document of AutoActionResource
            string subscriptionId = "E8DD5C3E-B5E9-4828-848D-2F377C67DA87";
            string resourceGroupName = "rgcomputeschedule";
            string autoActionName = "IV2bRqZys1AdKR2AkHkR4CZ";
            ResourceIdentifier autoActionResourceId = AutoActionResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, autoActionName);
            AutoActionResource autoAction = client.GetAutoActionResource(autoActionResourceId);

            // invoke the operation
            await autoAction.DeleteAsync(WaitUntil.Completed);

            Console.WriteLine("Succeeded");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Delete_AutoActionsDeleteMinimumSet()
        {
            // Generated from example definition: 2024-08-01-preview/AutoActions_Delete_MinimumSet_Gen.json
            // this example is just showing the usage of "AutoAction_Delete" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this AutoActionResource created on azure
            // for more information of creating AutoActionResource, please refer to the document of AutoActionResource
            string subscriptionId = "E8DD5C3E-B5E9-4828-848D-2F377C67DA87";
            string resourceGroupName = "rgcomputeschedule";
            string autoActionName = "pMRzo0lNluQ3Ot-t0p";
            ResourceIdentifier autoActionResourceId = AutoActionResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, autoActionName);
            AutoActionResource autoAction = client.GetAutoActionResource(autoActionResourceId);

            // invoke the operation
            await autoAction.DeleteAsync(WaitUntil.Completed);

            Console.WriteLine("Succeeded");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Update_AutoActionsUpdateMaximumSet()
        {
            // Generated from example definition: 2024-08-01-preview/AutoActions_Update_MaximumSet_Gen.json
            // this example is just showing the usage of "AutoAction_Update" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this AutoActionResource created on azure
            // for more information of creating AutoActionResource, please refer to the document of AutoActionResource
            string subscriptionId = "E8DD5C3E-B5E9-4828-848D-2F377C67DA87";
            string resourceGroupName = "rgcomputeschedule";
            string autoActionName = "IT0H9M1Dk5DCP43";
            ResourceIdentifier autoActionResourceId = AutoActionResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, autoActionName);
            AutoActionResource autoAction = client.GetAutoActionResource(autoActionResourceId);

            // invoke the operation
            AutoActionData data = new AutoActionData(default)
            {
                Properties = new AutoActionProperties(Models.ResourceType.VirtualMachine, ActionType.Start, DateTimeOffset.Parse("2024-10-25T22:23:48.890Z"), new AutoActionSchedule(
                XmlConvert.ToTimeSpan("22:23:48.890Z"),
                "udhfep",
                new WeekDay[] { WeekDay.Monday },
                new Month[] { Month.January },
                new int[] { 6 },
                new ScheduledActionExecutionParameterDetail
                {
                    OptimizationPreference = ScheduledActionOptimizationPreference.Cost,
                    RetryPolicy = new UserRequestRetryPolicy
                    {
                        RetryCount = 25,
                        RetryWindowInMinutes = 22,
                    },
                },
                ScheduledActionDeadlineType.Unknown), new NotificationProperties[]
            {
new NotificationProperties("i", NotificationType.Email, Language.EnUs)
{
Disabled = true,
}
            })
                {
                    EndOn = DateTimeOffset.Parse("2024-10-25T22:23:48.890Z"),
                    Disabled = true,
                },
                Tags =
{
["key5109"] = "teuwivjivbxayjv"
},
            };
            AutoActionResource result = await autoAction.UpdateAsync(data);

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            AutoActionData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Update_AutoActionsUpdateMinimumSet()
        {
            // Generated from example definition: 2024-08-01-preview/AutoActions_Update_MinimumSet_Gen.json
            // this example is just showing the usage of "AutoAction_Update" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this AutoActionResource created on azure
            // for more information of creating AutoActionResource, please refer to the document of AutoActionResource
            string subscriptionId = "E8DD5C3E-B5E9-4828-848D-2F377C67DA87";
            string resourceGroupName = "rgcomputeschedule";
            string autoActionName = "oNVxmKXLQEgFn2v";
            ResourceIdentifier autoActionResourceId = AutoActionResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, autoActionName);
            AutoActionResource autoAction = client.GetAutoActionResource(autoActionResourceId);

            // invoke the operation
            AutoActionData data = new AutoActionData(default);
            AutoActionResource result = await autoAction.UpdateAsync(data);

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            AutoActionData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task GetResources_AutoActionsListResourcesMaximumSet()
        {
            // Generated from example definition: 2024-08-01-preview/AutoActions_ListResources_MaximumSet_Gen.json
            // this example is just showing the usage of "AutoActions_ListResources" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this AutoActionResource created on azure
            // for more information of creating AutoActionResource, please refer to the document of AutoActionResource
            string subscriptionId = "E8DD5C3E-B5E9-4828-848D-2F377C67DA87";
            string resourceGroupName = "rgcomputeschedule";
            string autoActionName = "Ay7XZYEIv";
            ResourceIdentifier autoActionResourceId = AutoActionResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, autoActionName);
            AutoActionResource autoAction = client.GetAutoActionResource(autoActionResourceId);

            // invoke the operation and iterate over the result
            await foreach (Models.AutoActionResource item in autoAction.GetResourcesAsync())
            {
                Console.WriteLine($"Succeeded: {item}");
            }

            Console.WriteLine("Succeeded");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task GetResources_AutoActionsListResourcesMinimumSet()
        {
            // Generated from example definition: 2024-08-01-preview/AutoActions_ListResources_MinimumSet_Gen.json
            // this example is just showing the usage of "AutoActions_ListResources" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this AutoActionResource created on azure
            // for more information of creating AutoActionResource, please refer to the document of AutoActionResource
            string subscriptionId = "E8DD5C3E-B5E9-4828-848D-2F377C67DA87";
            string resourceGroupName = "rgcomputeschedule";
            string autoActionName = "dNAqRqdpJzKlJy";
            ResourceIdentifier autoActionResourceId = AutoActionResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, autoActionName);
            AutoActionResource autoAction = client.GetAutoActionResource(autoActionResourceId);

            // invoke the operation and iterate over the result
            await foreach (Models.AutoActionResource item in autoAction.GetResourcesAsync())
            {
                Console.WriteLine($"Succeeded: {item}");
            }

            Console.WriteLine("Succeeded");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task AttachResources_AutoActionsAttachResourcesMaximumSet()
        {
            // Generated from example definition: 2024-08-01-preview/AutoActions_AttachResources_MaximumSet_Gen.json
            // this example is just showing the usage of "AutoActions_AttachResources" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this AutoActionResource created on azure
            // for more information of creating AutoActionResource, please refer to the document of AutoActionResource
            string subscriptionId = "E8DD5C3E-B5E9-4828-848D-2F377C67DA87";
            string resourceGroupName = "rgcomputeschedule";
            string autoActionName = "aAEhQiMV";
            ResourceIdentifier autoActionResourceId = AutoActionResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, autoActionName);
            AutoActionResource autoAction = client.GetAutoActionResource(autoActionResourceId);

            // invoke the operation
            AutoActionResourceAttachContent content = new AutoActionResourceAttachContent(new Models.AutoActionResource[]
            {
new Models.AutoActionResource(new ResourceIdentifier("/subscriptions/EE1B7B71-0578-409C-B0A9-DDC2AE937A78/resourceGroups/myRg/providers/resourceProviderNamespace/myResourceType/myResource"))
{
NotificationSettings = {new NotificationProperties("i", NotificationType.Email, Language.EnUs)
{
Disabled = true,
}},
}
            });
            AutoActionResourceOperationResult result = await autoAction.AttachResourcesAsync(content);

            Console.WriteLine($"Succeeded: {result}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task AttachResources_AutoActionsAttachResourcesMinimumSet()
        {
            // Generated from example definition: 2024-08-01-preview/AutoActions_AttachResources_MinimumSet_Gen.json
            // this example is just showing the usage of "AutoActions_AttachResources" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this AutoActionResource created on azure
            // for more information of creating AutoActionResource, please refer to the document of AutoActionResource
            string subscriptionId = "E8DD5C3E-B5E9-4828-848D-2F377C67DA87";
            string resourceGroupName = "rgcomputeschedule";
            string autoActionName = "IfMp1jVgkOfyg";
            ResourceIdentifier autoActionResourceId = AutoActionResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, autoActionName);
            AutoActionResource autoAction = client.GetAutoActionResource(autoActionResourceId);

            // invoke the operation
            AutoActionResourceAttachContent content = new AutoActionResourceAttachContent(new Models.AutoActionResource[]
            {
new Models.AutoActionResource(new ResourceIdentifier("/subscriptions/EE1B7B71-0578-409C-B0A9-DDC2AE937A78/resourceGroups/myRg/providers/resourceProviderNamespace/myResourceType/myResource"))
            });
            AutoActionResourceOperationResult result = await autoAction.AttachResourcesAsync(content);

            Console.WriteLine($"Succeeded: {result}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task DetachResources_AutoActionsDetachResourcesMaximumSet()
        {
            // Generated from example definition: 2024-08-01-preview/AutoActions_DetachResources_MaximumSet_Gen.json
            // this example is just showing the usage of "AutoActions_DetachResources" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this AutoActionResource created on azure
            // for more information of creating AutoActionResource, please refer to the document of AutoActionResource
            string subscriptionId = "E8DD5C3E-B5E9-4828-848D-2F377C67DA87";
            string resourceGroupName = "rgcomputeschedule";
            string autoActionName = "qUbvSI0sBkb";
            ResourceIdentifier autoActionResourceId = AutoActionResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, autoActionName);
            AutoActionResource autoAction = client.GetAutoActionResource(autoActionResourceId);

            // invoke the operation
            AutoActionResourceDetachContent content = new AutoActionResourceDetachContent(new ResourceIdentifier[] { new ResourceIdentifier("/subscriptions/EE1B7B71-0578-409C-B0A9-DDC2AE937A78/resourceGroups/myRg/providers/resourceProviderNamespace/myResourceType/myResource") });
            AutoActionResourceOperationResult result = await autoAction.DetachResourcesAsync(content);

            Console.WriteLine($"Succeeded: {result}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task DetachResources_AutoActionsDetachResourcesMinimumSet()
        {
            // Generated from example definition: 2024-08-01-preview/AutoActions_DetachResources_MinimumSet_Gen.json
            // this example is just showing the usage of "AutoActions_DetachResources" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this AutoActionResource created on azure
            // for more information of creating AutoActionResource, please refer to the document of AutoActionResource
            string subscriptionId = "E8DD5C3E-B5E9-4828-848D-2F377C67DA87";
            string resourceGroupName = "rgcomputeschedule";
            string autoActionName = "WJOP9jif";
            ResourceIdentifier autoActionResourceId = AutoActionResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, autoActionName);
            AutoActionResource autoAction = client.GetAutoActionResource(autoActionResourceId);

            // invoke the operation
            AutoActionResourceDetachContent content = new AutoActionResourceDetachContent(new ResourceIdentifier[] { new ResourceIdentifier("/subscriptions/EE1B7B71-0578-409C-B0A9-DDC2AE937A78/resourceGroups/myRg/providers/resourceProviderNamespace/myResourceType/myResource") });
            AutoActionResourceOperationResult result = await autoAction.DetachResourcesAsync(content);

            Console.WriteLine($"Succeeded: {result}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task PatchResources_AutoActionsPatchResourcesMaximumSet()
        {
            // Generated from example definition: 2024-08-01-preview/AutoActions_PatchResources_MaximumSet_Gen.json
            // this example is just showing the usage of "AutoActions_PatchResources" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this AutoActionResource created on azure
            // for more information of creating AutoActionResource, please refer to the document of AutoActionResource
            string subscriptionId = "E8DD5C3E-B5E9-4828-848D-2F377C67DA87";
            string resourceGroupName = "rgcomputeschedule";
            string autoActionName = "TWToClxMr";
            ResourceIdentifier autoActionResourceId = AutoActionResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, autoActionName);
            AutoActionResource autoAction = client.GetAutoActionResource(autoActionResourceId);

            // invoke the operation
            AutoActionResourcePatchContent content = new AutoActionResourcePatchContent(new Models.AutoActionResource[]
            {
new Models.AutoActionResource(new ResourceIdentifier("/subscriptions/EE1B7B71-0578-409C-B0A9-DDC2AE937A78/resourceGroups/myRg/providers/resourceProviderNamespace/myResourceType/myResource"))
{
NotificationSettings = {new NotificationProperties("i", NotificationType.Email, Language.EnUs)
{
Disabled = true,
}},
}
            });
            AutoActionResourceOperationResult result = await autoAction.PatchResourcesAsync(content);

            Console.WriteLine($"Succeeded: {result}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task PatchResources_AutoActionsPatchResourcesMinimumSet()
        {
            // Generated from example definition: 2024-08-01-preview/AutoActions_PatchResources_MinimumSet_Gen.json
            // this example is just showing the usage of "AutoActions_PatchResources" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this AutoActionResource created on azure
            // for more information of creating AutoActionResource, please refer to the document of AutoActionResource
            string subscriptionId = "E8DD5C3E-B5E9-4828-848D-2F377C67DA87";
            string resourceGroupName = "rgcomputeschedule";
            string autoActionName = "tOVVFzg3e";
            ResourceIdentifier autoActionResourceId = AutoActionResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, autoActionName);
            AutoActionResource autoAction = client.GetAutoActionResource(autoActionResourceId);

            // invoke the operation
            AutoActionResourcePatchContent content = new AutoActionResourcePatchContent(new Models.AutoActionResource[]
            {
new Models.AutoActionResource(new ResourceIdentifier("/subscriptions/EE1B7B71-0578-409C-B0A9-DDC2AE937A78/resourceGroups/myRg/providers/resourceProviderNamespace/myResourceType/myResource"))
            });
            AutoActionResourceOperationResult result = await autoAction.PatchResourcesAsync(content);

            Console.WriteLine($"Succeeded: {result}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Disable_AutoActionsDisableMaximumSet()
        {
            // Generated from example definition: 2024-08-01-preview/AutoActions_Disable_MaximumSet_Gen.json
            // this example is just showing the usage of "AutoActions_Disable" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this AutoActionResource created on azure
            // for more information of creating AutoActionResource, please refer to the document of AutoActionResource
            string subscriptionId = "E8DD5C3E-B5E9-4828-848D-2F377C67DA87";
            string resourceGroupName = "rgcomputeschedule";
            string autoActionName = "okm";
            ResourceIdentifier autoActionResourceId = AutoActionResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, autoActionName);
            AutoActionResource autoAction = client.GetAutoActionResource(autoActionResourceId);

            // invoke the operation
            await autoAction.DisableAsync();

            Console.WriteLine("Succeeded");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Disable_AutoActionsDisableMinimumSet()
        {
            // Generated from example definition: 2024-08-01-preview/AutoActions_Disable_MinimumSet_Gen.json
            // this example is just showing the usage of "AutoActions_Disable" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this AutoActionResource created on azure
            // for more information of creating AutoActionResource, please refer to the document of AutoActionResource
            string subscriptionId = "E8DD5C3E-B5E9-4828-848D-2F377C67DA87";
            string resourceGroupName = "rgcomputeschedule";
            string autoActionName = "60h3KBZs1vptIdPsl8Aq4";
            ResourceIdentifier autoActionResourceId = AutoActionResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, autoActionName);
            AutoActionResource autoAction = client.GetAutoActionResource(autoActionResourceId);

            // invoke the operation
            await autoAction.DisableAsync();

            Console.WriteLine("Succeeded");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Enable_AutoActionsEnableMaximumSet()
        {
            // Generated from example definition: 2024-08-01-preview/AutoActions_Enable_MaximumSet_Gen.json
            // this example is just showing the usage of "AutoActions_Enable" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this AutoActionResource created on azure
            // for more information of creating AutoActionResource, please refer to the document of AutoActionResource
            string subscriptionId = "E8DD5C3E-B5E9-4828-848D-2F377C67DA87";
            string resourceGroupName = "rgcomputeschedule";
            string autoActionName = "WaXPT3QOh84JPPJP";
            ResourceIdentifier autoActionResourceId = AutoActionResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, autoActionName);
            AutoActionResource autoAction = client.GetAutoActionResource(autoActionResourceId);

            // invoke the operation
            await autoAction.EnableAsync();

            Console.WriteLine("Succeeded");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Enable_AutoActionsEnableMinimumSet()
        {
            // Generated from example definition: 2024-08-01-preview/AutoActions_Enable_MinimumSet_Gen.json
            // this example is just showing the usage of "AutoActions_Enable" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this AutoActionResource created on azure
            // for more information of creating AutoActionResource, please refer to the document of AutoActionResource
            string subscriptionId = "E8DD5C3E-B5E9-4828-848D-2F377C67DA87";
            string resourceGroupName = "rgcomputeschedule";
            string autoActionName = "GQ2ZspbAtcZV51mw2kJ";
            ResourceIdentifier autoActionResourceId = AutoActionResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, autoActionName);
            AutoActionResource autoAction = client.GetAutoActionResource(autoActionResourceId);

            // invoke the operation
            await autoAction.EnableAsync();

            Console.WriteLine("Succeeded");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task CancelNextOccurrence_AutoActionsCancelNextOccurrenceMaximumSet()
        {
            // Generated from example definition: 2024-08-01-preview/AutoActions_CancelNextOccurrence_MaximumSet_Gen.json
            // this example is just showing the usage of "AutoActions_CancelNextOccurrence" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this AutoActionResource created on azure
            // for more information of creating AutoActionResource, please refer to the document of AutoActionResource
            string subscriptionId = "E8DD5C3E-B5E9-4828-848D-2F377C67DA87";
            string resourceGroupName = "rgcomputeschedule";
            string autoActionName = "aYiw6BKQL73";
            ResourceIdentifier autoActionResourceId = AutoActionResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, autoActionName);
            AutoActionResource autoAction = client.GetAutoActionResource(autoActionResourceId);

            // invoke the operation
            CancelOccurrenceContent content = new CancelOccurrenceContent(new ResourceIdentifier[] { new ResourceIdentifier("/subscriptions/EE1B7B71-0578-409C-B0A9-DDC2AE937A78/resourceGroups/myRg/providers/resourceProviderNamespace/myResourceType/myResource") });
            OccurrenceResource result = await autoAction.CancelNextOccurrenceAsync(content);

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            OccurrenceData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task CancelNextOccurrence_AutoActionsCancelNextOccurrenceMinimumSet()
        {
            // Generated from example definition: 2024-08-01-preview/AutoActions_CancelNextOccurrence_MinimumSet_Gen.json
            // this example is just showing the usage of "AutoActions_CancelNextOccurrence" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this AutoActionResource created on azure
            // for more information of creating AutoActionResource, please refer to the document of AutoActionResource
            string subscriptionId = "E8DD5C3E-B5E9-4828-848D-2F377C67DA87";
            string resourceGroupName = "rgcomputeschedule";
            string autoActionName = "nOsb6AUVx";
            ResourceIdentifier autoActionResourceId = AutoActionResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, autoActionName);
            AutoActionResource autoAction = client.GetAutoActionResource(autoActionResourceId);

            // invoke the operation
            CancelOccurrenceContent content = new CancelOccurrenceContent(new ResourceIdentifier[] { new ResourceIdentifier("/subscriptions/EE1B7B71-0578-409C-B0A9-DDC2AE937A78/resourceGroups/myRg/providers/resourceProviderNamespace/myResourceType/myResource") });
            OccurrenceResource result = await autoAction.CancelNextOccurrenceAsync(content);

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            OccurrenceData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task TriggerManualOccurrence_AutoActionsTriggerManualOccurrenceMaximumSet()
        {
            // Generated from example definition: 2024-08-01-preview/AutoActions_TriggerManualOccurrence_MaximumSet_Gen.json
            // this example is just showing the usage of "AutoActions_TriggerManualOccurrence" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this AutoActionResource created on azure
            // for more information of creating AutoActionResource, please refer to the document of AutoActionResource
            string subscriptionId = "E8DD5C3E-B5E9-4828-848D-2F377C67DA87";
            string resourceGroupName = "rgcomputeschedule";
            string autoActionName = "1boQb0Dw5NFQ8Iylh0pmFi6";
            ResourceIdentifier autoActionResourceId = AutoActionResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, autoActionName);
            AutoActionResource autoAction = client.GetAutoActionResource(autoActionResourceId);

            // invoke the operation
            OccurrenceResource result = await autoAction.TriggerManualOccurrenceAsync();

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            OccurrenceData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task TriggerManualOccurrence_AutoActionsTriggerManualOccurrenceMinimumSet()
        {
            // Generated from example definition: 2024-08-01-preview/AutoActions_TriggerManualOccurrence_MinimumSet_Gen.json
            // this example is just showing the usage of "AutoActions_TriggerManualOccurrence" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this AutoActionResource created on azure
            // for more information of creating AutoActionResource, please refer to the document of AutoActionResource
            string subscriptionId = "E8DD5C3E-B5E9-4828-848D-2F377C67DA87";
            string resourceGroupName = "rgcomputeschedule";
            string autoActionName = "o6qadYCcsUBWJ5Izznn";
            ResourceIdentifier autoActionResourceId = AutoActionResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, autoActionName);
            AutoActionResource autoAction = client.GetAutoActionResource(autoActionResourceId);

            // invoke the operation
            OccurrenceResource result = await autoAction.TriggerManualOccurrenceAsync();

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            OccurrenceData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }
    }
}
