// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading.Tasks;
using System.Xml;
using Azure.Core;
using Azure.Identity;
using Azure.ResourceManager.ComputeSchedule.Models;
using NUnit.Framework;

namespace Azure.ResourceManager.ComputeSchedule.Samples
{
    public partial class Sample_OccurrenceResource
    {
        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Get_OccurrencesGetMaximumSet()
        {
            // Generated from example definition: 2024-08-01-preview/Occurrences_Get_MaximumSet_Gen.json
            // this example is just showing the usage of "Occurrence_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this OccurrenceResource created on azure
            // for more information of creating OccurrenceResource, please refer to the document of OccurrenceResource
            string subscriptionId = "E8DD5C3E-B5E9-4828-848D-2F377C67DA87";
            string resourceGroupName = "rgcomputeschedule";
            string autoActionName = "-NsTNcpXLW5lr";
            string occurrenceId = "bec84b83-43ac-658d-a8ec-7995315dd309";
            ResourceIdentifier occurrenceResourceId = OccurrenceResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, autoActionName, occurrenceId);
            OccurrenceResource occurrence = client.GetOccurrenceResource(occurrenceResourceId);

            // invoke the operation
            OccurrenceResource result = await occurrence.GetAsync();

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            OccurrenceData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Get_OccurrencesGetMinimumSet()
        {
            // Generated from example definition: 2024-08-01-preview/Occurrences_Get_MinimumSet_Gen.json
            // this example is just showing the usage of "Occurrence_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this OccurrenceResource created on azure
            // for more information of creating OccurrenceResource, please refer to the document of OccurrenceResource
            string subscriptionId = "E8DD5C3E-B5E9-4828-848D-2F377C67DA87";
            string resourceGroupName = "rgcomputeschedule";
            string autoActionName = "q5NoZUgqe4GKhBe";
            string occurrenceId = "da7c55af-2bb1-2212-2147-9eba521fb361";
            ResourceIdentifier occurrenceResourceId = OccurrenceResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, autoActionName, occurrenceId);
            OccurrenceResource occurrence = client.GetOccurrenceResource(occurrenceResourceId);

            // invoke the operation
            OccurrenceResource result = await occurrence.GetAsync();

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            OccurrenceData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task GetResources_OccurrencesListResourcesMaximumSet()
        {
            // Generated from example definition: 2024-08-01-preview/Occurrences_ListResources_MaximumSet_Gen.json
            // this example is just showing the usage of "Occurrences_ListResources" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this OccurrenceResource created on azure
            // for more information of creating OccurrenceResource, please refer to the document of OccurrenceResource
            string subscriptionId = "E8DD5C3E-B5E9-4828-848D-2F377C67DA87";
            string resourceGroupName = "rgcomputeschedule";
            string autoActionName = "PXz7rfVEANvh-1cMF8YCaY";
            string occurrenceId = "0f002795-3c48-545f-e3ad-6569e10ccbc1";
            ResourceIdentifier occurrenceResourceId = OccurrenceResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, autoActionName, occurrenceId);
            OccurrenceResource occurrence = client.GetOccurrenceResource(occurrenceResourceId);

            // invoke the operation and iterate over the result
            await foreach (Models.OccurrenceResource item in occurrence.GetResourcesAsync())
            {
                Console.WriteLine($"Succeeded: {item}");
            }

            Console.WriteLine("Succeeded");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task GetResources_OccurrencesListResourcesMinimumSet()
        {
            // Generated from example definition: 2024-08-01-preview/Occurrences_ListResources_MinimumSet_Gen.json
            // this example is just showing the usage of "Occurrences_ListResources" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this OccurrenceResource created on azure
            // for more information of creating OccurrenceResource, please refer to the document of OccurrenceResource
            string subscriptionId = "E8DD5C3E-B5E9-4828-848D-2F377C67DA87";
            string resourceGroupName = "rgcomputeschedule";
            string autoActionName = "yudYI1";
            string occurrenceId = "b549522d-2398-a1f4-e559-087097ad8ee9";
            ResourceIdentifier occurrenceResourceId = OccurrenceResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, autoActionName, occurrenceId);
            OccurrenceResource occurrence = client.GetOccurrenceResource(occurrenceResourceId);

            // invoke the operation and iterate over the result
            await foreach (Models.OccurrenceResource item in occurrence.GetResourcesAsync())
            {
                Console.WriteLine($"Succeeded: {item}");
            }

            Console.WriteLine("Succeeded");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Cancel_OccurrencesCancelMaximumSet()
        {
            // Generated from example definition: 2024-08-01-preview/Occurrences_Cancel_MaximumSet_Gen.json
            // this example is just showing the usage of "Occurrences_Cancel" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this OccurrenceResource created on azure
            // for more information of creating OccurrenceResource, please refer to the document of OccurrenceResource
            string subscriptionId = "E8DD5C3E-B5E9-4828-848D-2F377C67DA87";
            string resourceGroupName = "rgcomputeschedule";
            string autoActionName = "c89";
            string occurrenceId = "54bef615-cb80-c4af-48f7-c731f4a51b0b";
            ResourceIdentifier occurrenceResourceId = OccurrenceResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, autoActionName, occurrenceId);
            OccurrenceResource occurrence = client.GetOccurrenceResource(occurrenceResourceId);

            // invoke the operation
            CancelOccurrenceContent content = new CancelOccurrenceContent(new ResourceIdentifier[] { new ResourceIdentifier("/subscriptions/EE1B7B71-0578-409C-B0A9-DDC2AE937A78/resourceGroups/myRg/providers/resourceProviderNamespace/myResourceType/myResource") });
            OccurrenceResource result = await occurrence.CancelAsync(content);

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            OccurrenceData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Cancel_OccurrencesCancelMinimumSet()
        {
            // Generated from example definition: 2024-08-01-preview/Occurrences_Cancel_MinimumSet_Gen.json
            // this example is just showing the usage of "Occurrences_Cancel" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this OccurrenceResource created on azure
            // for more information of creating OccurrenceResource, please refer to the document of OccurrenceResource
            string subscriptionId = "E8DD5C3E-B5E9-4828-848D-2F377C67DA87";
            string resourceGroupName = "rgcomputeschedule";
            string autoActionName = "0aG1Bk";
            string occurrenceId = "db954444-daf0-757a-a027-a36308195249";
            ResourceIdentifier occurrenceResourceId = OccurrenceResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, autoActionName, occurrenceId);
            OccurrenceResource occurrence = client.GetOccurrenceResource(occurrenceResourceId);

            // invoke the operation
            CancelOccurrenceContent content = new CancelOccurrenceContent(new ResourceIdentifier[] { new ResourceIdentifier("/subscriptions/EE1B7B71-0578-409C-B0A9-DDC2AE937A78/resourceGroups/myRg/providers/resourceProviderNamespace/myResourceType/myResource") });
            OccurrenceResource result = await occurrence.CancelAsync(content);

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            OccurrenceData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Delay_OccurrencesDelayMaximumSet()
        {
            // Generated from example definition: 2024-08-01-preview/Occurrences_Delay_MaximumSet_Gen.json
            // this example is just showing the usage of "Occurrences_Delay" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this OccurrenceResource created on azure
            // for more information of creating OccurrenceResource, please refer to the document of OccurrenceResource
            string subscriptionId = "E8DD5C3E-B5E9-4828-848D-2F377C67DA87";
            string resourceGroupName = "rgcomputeschedule";
            string autoActionName = "N7Uhku4iXFPF3to1QnB3lo9T";
            string occurrenceId = "849ec5f6-7e83-ad7b-b855-0c49f4a34bde";
            ResourceIdentifier occurrenceResourceId = OccurrenceResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, autoActionName, occurrenceId);
            OccurrenceResource occurrence = client.GetOccurrenceResource(occurrenceResourceId);

            // invoke the operation
            DelayContent content = new DelayContent(XmlConvert.ToTimeSpan("PT23M"), new ResourceIdentifier[] { new ResourceIdentifier("/subscriptions/EE1B7B71-0578-409C-B0A9-DDC2AE937A78/resourceGroups/myRg/providers/resourceProviderNamespace/myResourceType/myResource") });
            OccurrenceResource result = await occurrence.DelayAsync(content);

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            OccurrenceData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Delay_OccurrencesDelayMinimumSet()
        {
            // Generated from example definition: 2024-08-01-preview/Occurrences_Delay_MinimumSet_Gen.json
            // this example is just showing the usage of "Occurrences_Delay" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this OccurrenceResource created on azure
            // for more information of creating OccurrenceResource, please refer to the document of OccurrenceResource
            string subscriptionId = "E8DD5C3E-B5E9-4828-848D-2F377C67DA87";
            string resourceGroupName = "rgcomputeschedule";
            string autoActionName = "bHjAQU-JfmsorvFjLt";
            string occurrenceId = "8c051984-7a6c-af5b-cc31-44afa49c31a4";
            ResourceIdentifier occurrenceResourceId = OccurrenceResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, autoActionName, occurrenceId);
            OccurrenceResource occurrence = client.GetOccurrenceResource(occurrenceResourceId);

            // invoke the operation
            DelayContent content = new DelayContent(XmlConvert.ToTimeSpan("PT23M"), new ResourceIdentifier[] { new ResourceIdentifier("/subscriptions/EE1B7B71-0578-409C-B0A9-DDC2AE937A78/resourceGroups/myRg/providers/resourceProviderNamespace/myResourceType/myResource") });
            OccurrenceResource result = await occurrence.DelayAsync(content);

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            OccurrenceData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }
    }
}
